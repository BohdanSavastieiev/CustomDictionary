@page "{userDictionaryId:int?}/{pageId:int?}/{pageSize?}/{sortOrder?}/{searchString?}"
@model DictionaryApplication.Pages.UserDictionarySelector.UserDictionaryView.IndexModel

@{
    ViewData["Title"] = "Dictionary View";
}

<h1>@Model.UserDictionary.Name</h1>

<p>
    <a asp-page="Create" asp-route-userDictionaryId="@Model.UserDictionary.Id" class="big-link">Add new lexeme</a>
</p>

<div class="container">
    <div class="row" id="sort-search">
        <div class="col-md-6 text-center mt-2">
            <form id="search-form" onsubmit="return performSearch();">
                <input type="submit" value="Search" class="big-btn lexeme-search-link-btn" />
                <input type="text" id="search-input" placeholder="Search.." value="@(ViewData["CurrentFilter"] != null ? System.Net.WebUtility.HtmlDecode(ViewData["CurrentFilter"].ToString()) : "")" onfocus="if(this.value=='Search..')this.value='';" />
            </form>
            @if (ViewData["CurrentFilter"] != null)
            {
                <a class="back-link lexeme-search-link-btn" id="search" asp-action="Index" asp-route-userDictionaryId="@Model.UserDictionary.Id" asp-route-pageId="1" asp-route-pageSize="@Model.LexemeDetailsList.PagingInfo.PageSize" asp-route-sortOrder="@Model.SortOrder" asp-route-searchString="">Back to Full List</a>
            }

        </div>
        <div class="col-md-6 text-center mt-2">
            <label asp-for="SortOrder">Sort Order: </label>
            <select id="sort-select" name="Sort">
                <option value="date_asc">From oldest to newest</option>
                <option value="date_desc">From newest to oldest</option>
                <option value="alphabetical_asc">Alphabetical - Ascending</option>
                <option value="alphabetical_desc">Alphabetical - Descending</option>
                <option value="test_results_asc">Test results - Ascending</option>
                <option value="test_results_desc">Test results - Descending</option>
            </select>
        </div>

    </div>
</div>




<table class="table" id="lexeme-table">
    <thead>
        <tr>
            <th>
                <h5>
                    №
                </h5>

            </th>
            <th>
                <h5>
                    Studied Lexeme (@Model.UserDictionary.StudiedLanguage.LangCode)
                </h5>
            </th>
            <th>
                <h5>
                    Translation (@Model.UserDictionary.TranslationLanguage.LangCode)
                </h5>
            </th>
            <th>
                <h5>
                    Test Results
                </h5>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{
            int counter = Model.FirstItemId;
            foreach (var item in Model.LexemeDetailsList.LexemeDetails)
            {
                <tr class="@(item.Lexeme.Description != null ? "table-row-link": "other")">
                    <td>
                        @counter.
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Lexeme.Word)
                    </td>
                    <td>
                        @Html.Raw(item.TranslationsRepresentation.Replace("\n", "<br />"))
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TestResultsRepresentation)
                    </td>
                    <td class="right-td">
                        <a class="small-link lexeme-link" asp-page="./Edit" asp-route-userDictionaryId="@Model.UserDictionary.Id"
                           asp-route-lexemeId="@item.Lexeme.Id" asp-route-pageId="@Model.LexemeDetailsList.PagingInfo.CurrentPage">Edit</a>
                        <a class="small-link lexeme-link" asp-page="./Delete" asp-route-userDictionaryId="@Model.UserDictionary.Id"
                           asp-route-lexemeId="@item.Lexeme.Id" asp-route-pageId="@Model.LexemeDetailsList.PagingInfo.CurrentPage">Delete</a>
                    </td>
                </tr>
                {
                    counter++;
                    if (item.Lexeme.Description != null)
                    {
                        <tr class="description-row" style="display: none;">
                            <td colspan="5">
                                <div class="description-box">
                                    @Html.Raw(item.Lexeme.Description.Replace("\n", "<br />"))
                                </div>
                            </td>
                        </tr>
                    }
                }
            }
        }
    </tbody>
</table>

<div class="pagingDiv">
    <div class="pagination-input">
        <div class="pagination-input-field-container">
            <input class="pagination-input-field" type="number" id="page-size-input" name="pageSize" min="1" max="1000" value="@Model.LexemeDetailsList.PagingInfo.PageSize" />
        </div>
        <div class="pagination-submit">
            <button type="button" class="pagination-submit-button" onclick="return updatePageSize()">Set</button>
        </div>
    </div>

    @for (int i = 1; i <= Model.LexemeDetailsList.PagingInfo.TotalPages; i++)
    {
        if (i == Model.LexemeDetailsList.PagingInfo.CurrentPage)
        {
            <a class="paging active" asp-page="Index" asp-route-userDictionaryId="@Model.UserDictionary.Id" asp-route-pageId="@i" asp-route-pageSize="@Model.LexemeDetailsList.PagingInfo.PageSize" asp-route-sortOrder="@Model.SortOrder" asp-route-searchString="@ViewData["CurrentFilter"]">@i</a>
        }
        else
        {
            <a class="paging" asp-page="Index" asp-route-userDictionaryId="@Model.UserDictionary.Id" asp-route-pageId="@i" asp-route-pageSize="@Model.LexemeDetailsList.PagingInfo.PageSize" asp-route-sortOrder="@Model.SortOrder" asp-route-searchString="@ViewData["CurrentFilter"]">@i</a>
        }
    }
</div>




@section scripts {
    <script>

        $(function () {
            $(".table-row-link").click(function (event) {
                if (!$(event.target).is(".lexeme-link")) {
                    $(this).next(".description-row").toggle();
                }
            });
        });

        var pageSize = document.getElementById('page-size-input').value;
        var searchString = document.getElementById('search-input').value;
        var sortOrder = "@Model.SortOrder";

        document.addEventListener("DOMContentLoaded", function () {
            var sortSelect = document.getElementById("sort-select");
            var options = sortSelect.options;
            for (var i = 0; i < options.length; i++) {
                if (options[i].value === sortOrder) {
                    options[i].setAttribute("selected", "selected");
                    break;
                }
            }
        });

        document.getElementById("sort-select").addEventListener("change", function () {
            sortOrder = this.value;
            window.location.assign("/UserDictionarySelector/UserDictionaryView/" + @Model.UserDictionary.Id + "/" + @Model.LexemeDetailsList.PagingInfo.CurrentPage + "/" + @Model.LexemeDetailsList.PagingInfo.PageSize + "/" + sortOrder + "/" + searchString);
        });

        function performSearch() {
            searchString = document.getElementById('search-input').value;
            window.location.assign("/UserDictionarySelector/UserDictionaryView/" + @Model.UserDictionary.Id + "/" + 1 + "/" + @Model.LexemeDetailsList.PagingInfo.PageSize + "/" + sortOrder + "/" + searchString);
            return false;
        }

        function updatePageSize() {
            pageSize = document.getElementById('page-size-input').value;
            window.location.assign("/UserDictionarySelector/UserDictionaryView/" + @Model.UserDictionary.Id + "/" + 1 + "/" + pageSize + "/" + sortOrder + "/" + searchString);
            return false;
        }

    </script>
}