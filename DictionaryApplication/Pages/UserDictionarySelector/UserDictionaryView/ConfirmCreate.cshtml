@page
@model DictionaryApplication.Pages.UserDictionarySelector.UserDictionaryView.ConfirmCreateModel
@{
    ViewData["Title"] = "Confirm Lexeme Creation";
}

<form method="post" class="lexeme-info-container">
    <input type="hidden" name="userDictionaryId" value="@Model.UserDictionary.Id" />
    <input type="hidden" id="newLexemeInput" name="lexemeInputSerialized" />

    <div class="lexeme-section">
        <div class="left-block">
            <h4>Word:</h4>
            <h1 id="lexeme">@Model.LexemeInput.Lexeme</h1>
            @if (!string.IsNullOrEmpty(Model.LexemeInput.Transcription))
            {
                <h4>Transcription:</h4>
                <h2 id="transcription">@Model.LexemeInput.Transcription</h2>
            }
        </div>
        <div class="right-block">
            @if (Model.LexemeInput.WordForms.Any())
            {
                <h4>Word Forms:</h4>
                <ul>
                    @foreach (var wordForm in Model.LexemeInput.WordForms)
                    {
                        <li class="editable wordForm">@wordForm.Word</li>
                    }
                </ul>
            }
        </div>
    </div>


    <div class="lexeme-info-section">
        <h4>Translations</h4>
        @for (var i = 0; i < Model.LexemeInput.LexemeInformations.Count; i++)
        {
            var lexemeInfo = Model.LexemeInput.LexemeInformations[i];
            <div class="lexeme-info">
                <div class="translation-block lexeme-information-element-block">
                    <span class="editable translation">@lexemeInfo.Translation</span>
                    <button type="button" class="delete-lexeme-info-button lexeme-info-btn">&#215;</button>
                </div>
                @if (lexemeInfo.Examples.Any() || lexemeInfo.RelatedLexemes.Any())
                {
                    <div class="grid-container left-right-borders">

                        <div class="examples ">
                            @if (lexemeInfo.Examples.Any())
                            {
                                <div class="examples-inner">
                                    <button class="delete-examples-button lexeme-info-btn">&#215;</button>
                                    <h5 class="lexeme-info-h5">Examples</h5>
                                    <ul class="lexeme-info-list">
                                        @for (var index = 0; index < lexemeInfo.Examples.Count; index++)
                                        {
                                            <li>
                                                <div class="example">
                                                    <span class="editable nativeExample">@lexemeInfo.Examples[index].NativeExample</span>
                                                    <span class="editable translatedExample">@lexemeInfo.Examples[index].TranslatedExample</span>
                                                    <br>
                                                </div>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>


                        <div class="related-lexemes">
                            @{
                                var synonyms = lexemeInfo.RelatedLexemes.Where(x => x.Type == DTOs.RelatedLexemeType.Synonym);
                                var antonyms = lexemeInfo.RelatedLexemes.Where(x => x.Type == DTOs.RelatedLexemeType.Antonym);
                                var derivatives = lexemeInfo.RelatedLexemes.Where(x => x.Type == DTOs.RelatedLexemeType.Derivative);

                                <div class="synonyms">
                                    @if (synonyms.Any())
                                    {
                                        <div class="synonyms-inner">
                                            <button class="delete-synonyms-button lexeme-info-btn">&#215;</button>
                                            <h5 class="lexeme-info-h5">Synonyms</h5>
                                            <ul class="lexeme-info-list">
                                                @foreach (var synonym in synonyms)
                                                {
                                                    <li>
                                                        <span class="editable synonym">@synonym.Word</span>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                </div>
                                <div class="antonyms">
                                    @if (antonyms.Any())
                                    {
                                        <div class="antonyms-inner">
                                            <button class="delete-antonyms-button lexeme-info-btn">&#215;</button>
                                            <h5 class="lexeme-info-h5">Antonyms</h5>
                                            <ul class="lexeme-info-list">
                                                @foreach (var antonym in antonyms)
                                                {
                                                    <li>
                                                        <span class="editable antonym">@antonym.Word</span>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                </div>
                                <div class="derivatives">
                                    @if (derivatives.Any())
                                    {
                                        <div class="derivatives-inner">
                                            <button class="delete-derivatives-button lexeme-info-btn">&#215;</button>
                                            <h5 class="lexeme-info-h5">Derivatives</h5>
                                            <ul class="lexeme-info-list">
                                                @foreach (var derivative in derivatives)
                                                {
                                                    <li>
                                                        <span class="editable derivative">@derivative.Word</span>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                </div>
                            }
                        </div>

                    </div>
                }

            </div>
        }
        <div>
            <input type="submit" value="Create" id="create-button" class="big-btn" />
        </div>
    </div>


</form>

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            checkLexemeInfoElements();

            $(document).on('dblclick', '.editable', function () {
                var element = $(this);
                if (element.is('.editable') && element.is(':not(input)')) {
                    var value = element.text();
                    var name = element.attr('data-name') || ''; // Используйте пустую строку, если атрибут не определен
                    var tag = element.prop('tagName');
                    var input = $('<input type="text" class="editable ' + element.attr('class') + '" data-name="' + name + '" data-tag="' + tag + '" />').val(value);
                    element.replaceWith(input);
                    input.focus();
                }
            });

            $(document).on('blur', 'input.editable', function () {
                var input = $(this);
                var value = input.val();
                var name = input.attr('data-name') || ''; // Используйте пустую строку, если атрибут не определен
                var tag = input.attr('data-tag');
                var element = $('<' + tag + ' class="editable ' + input.attr('class') + '" data-name="' + name + '" data-value="' + value + '">' + value + '</' + tag + '>');
                input.replaceWith(element);
            });

            $('form').submit(function () {
                $('span.editable, h3.editable, h4.editable, li.editable').each(function () {
                    var element = $(this);
                    var name = element.attr('data-name') || ''; // Используйте пустую строку, если атрибут не определен
                    var value = element.attr('data-value') || element.text();
                    var input = $('<input type="hidden" name="' + name + '" value="' + value + '" />');
                    element.after(input);
                });
            });

            $(document).on('input', 'input.editable', function () {
                var input = $(this);
                var temp = $('<span>').text(input.val()).css({
                    'font-family': input.css('font-family'),
                    'font-size': input.css('font-size'),
                    'white-space': 'pre'
                }).appendTo('body');
                input.width(temp.width() + 10);
                temp.remove();
            });

            $(document).on('input', 'input.editable', function () {
                var input = $(this);
                input.height('auto');
                input.height(input[0].scrollHeight);
            });
        });


        function checkLexemeInfoElements() {
            if ($('.lexeme-info').length === 0) {
                var userDictionaryId = '@Model.UserDictionary.Id';
                window.location.href = '/UserDictionarySelector/UserDictionaryView/Create?userDictionaryId=' + userDictionaryId;
            }
        }




        $(document).on('click', '.delete-lexeme-info-button', function () {
            $(this).closest('.lexeme-info').remove();
            checkLexemeInfoElements();
        });

        $(document).on('click', '.delete-examples-button', function () {
            $(this).closest('.examples-inner').remove();
            checkAndRemoveGridContainer();
        });

        $(document).on('click', '.delete-synonyms-button', function () {
            $(this).closest('.synonyms-inner').remove();
            checkAndRemoveGridContainer();
        });

        $(document).on('click', '.delete-antonyms-button', function () {
            $(this).closest('.antonyms-inner').remove();
            checkAndRemoveGridContainer();
        });

        $(document).on('click', '.delete-derivatives-button', function () {
            $(this).closest('.derivatives-inner').remove();
            checkAndRemoveGridContainer();
        });

        function checkAndRemoveGridContainer() {
            var gridContainers = $('.grid-container');

            gridContainers.each(function () {
                var gridContainer = $(this);
                if (!gridContainer.find('.examples-inner, .synonyms-inner, .antonyms-inner, .derivatives-inner').length) {
                    gridContainer.remove();
                }
            });
        }

        // Click event handler for the "Create" button
        $('#create-button').click(function (e) {
            // Prevent the default form submission
            e.preventDefault();

            var lexemeValue = $('#lexeme').text().trim();
            var transcriptionValue = $('#transcription').text().trim();
            var wordForms = [];

            $('.wordForm').each(function () {
                var wordFormText = $(this).text().trim();
                var wordForm = {
                    Word: wordFormText
                };
                wordForms.push(wordForm);
            });
            var lexemeInformations = [];

            $('.lexeme-info').each(function () {
                var lexemeInfoElement = $(this);

                var translation = lexemeInfoElement.find('.translation').text().trim();

                // Create an array to store Examples objects for this LexemeInformation
                var examples = [];

                // Loop through the Examples sections within this LexemeInformation section
                lexemeInfoElement.find('.example').each(function () {
                    var exampleElement = $(this);
                    var nativeExample = exampleElement.find('.nativeExample').text().trim();
                    var translatedExample = exampleElement.find('.translatedExample').text().trim();

                    // Create an Example object
                    var example = {
                        NativeExample: nativeExample,
                        TranslatedExample: translatedExample
                    };

                    // Add the Example object to the examples array
                    examples.push(example);
                });


                var relatedLexemes = [];

                lexemeInfoElement.find('.synonym').each(function () {
                    var synonymText = $(this).text().trim();

                    var synonym = {
                        Word: synonymText,
                        Type: "Synonym"
                    };

                    relatedLexemes.push(synonym);
                });
                lexemeInfoElement.find('.antonym').each(function () {
                    var antonymText = $(this).text().trim();

                    var antonym = {
                        Word: antonymText,
                        Type: "Antonym"
                    };

                    relatedLexemes.push(antonym);
                });
                lexemeInfoElement.find('.derivative').each(function () {
                    var derivativeText = $(this).text().trim();

                    var derivative = {
                        Word: derivativeText,
                        Type: "Derivative"
                    };

                    relatedLexemes.push(derivative);
                });


                // Create a LexemeInformationDto object for this section
                var lexemeInformationDto = {
                    Translation: translation,
                    Examples: examples,
                    RelatedLexemes: relatedLexemes
                };

                // Add the LexemeInformationDto object to the lexemeInformations array
                lexemeInformations.push(lexemeInformationDto);
            });
            // Create a new LexemeInput object with the updated data
            var newLexemeInput = {
                Lexeme: lexemeValue,
                Transcription: transcriptionValue,
                LexemeInformations: lexemeInformations,
                WordForms: wordForms
            };

            // Set the new object as the value of the hidden input field
            $('#newLexemeInput').val(JSON.stringify(newLexemeInput));

            // Submit the form
            $('form').submit();
        });

    </script>
}
